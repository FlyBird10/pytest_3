{"name": "test_customer_dept[1]", "status": "broken", "statusDetails": {"message": "TypeError: 'int' object is not iterable", "trace": "self = <test_case.test_customer_my.Test_customer_dept object at 0x00000239F23CD5C0>, get_headers = <function get_headers.<locals>._inner at 0x00000239F24360D0>, get_url = <function get_url.<locals>._inner at 0x00000239F2436048>, get_customer_dept = 1\n\n    def test_customer_dept(self, get_headers, get_url, get_customer_dept):\n        http = self.http(get_headers, get_url)\n        if http['method'] == \"post\":\n>           response = requests.post(http['url'], headers=http['headers'], data=get_customer_dept)\n\ntest_customer_my.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\lib\\site-packages\\requests\\api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n..\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\lib\\site-packages\\requests\\sessions.py:533: in request\n    resp = self.send(prep, **send_kwargs)\n..\\lib\\site-packages\\requests\\sessions.py:646: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x00000239F23D3E48>, request = <PreparedRequest [POST]>, stream = False, timeout = <urllib3.util.timeout.Timeout object at 0x00000239F23D3240>, verify = True, cert = None, proxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n>                   for i in request.body:\nE                   TypeError: 'int' object is not iterable\n\n..\\lib\\site-packages\\requests\\adapters.py:469: TypeError"}, "attachments": [{"name": "stdout", "source": "5344bb6c-83e4-40ed-aa2f-8c3f5b1ed255-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_customer_dept", "value": "1"}], "start": 1577256995442, "stop": 1577256995476, "uuid": "ae5b06b7-5e6b-464c-8e68-3cd0d24cfb74", "historyId": "80863d2456a3782aceb63382399393c5", "testCaseId": "87e67ffcc37cdf04679979e172a2a896", "fullName": "test_case.test_customer_my.Test_customer_dept#test_customer_dept", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_customer_my"}, {"name": "subSuite", "value": "Test_customer_dept"}, {"name": "host", "value": "DESKTOP-CP58A7M"}, {"name": "thread", "value": "1328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_customer_my"}]}